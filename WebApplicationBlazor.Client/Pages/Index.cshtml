@page "/"
@using WebApplicationBlazor.Shared
@using Newtonsoft.Json
@using System.Text
@inject HttpClient Http

<h1>To Do List</h1>

@if (items == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>

        <div class="input-group mb-3">
            <input for="Title" type="text" class="form-control" placeholder="Title" aria-label="Title" aria-describedby="input_title"
                   bind="@currentItem.Title" />
        </div>
        <div class="input-group mb-3">
            <input for="Description" type="text" class="form-control" placeholder="Description" aria-label="Description" aria-describedby="input_desc"
                   bind="@currentItem.Description" />
        </div>
        <div>
            <button class="btn btn-primary" onclick=@(() => CreateItem())>Add</button>
        </div>
    </div>

    <div>
        <h2>Need to be done:</h2>

        <table class="table">
            <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Title</th>
                    <th scope="col">Decription</th>
                    <th scope="col">Remove</th>
                </tr>
            </thead>
            <tbody>
                @{int i = 1;}
                @foreach (var item in items)
                {
                    <tr>
                        <th scope="row">@i</th>
                        <td>@item.Title</td>
                        <td>@item.Description</td>
                        <td><button class="btn btn-danger" onclick=@(() => ConfirmDelete(item.Id, item.Title))>Remove</button></td>
                    </tr>
                    i++;
                }
            </tbody>
        </table>
    </div>

    <div class="modal" id="myModal">
        <div class="modal-dialog">
            <div class="modal-content">

                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 class="modal-title">Confirm delete</h4>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <input type="hidden" id="toDoToDeleteField" bind=@DeleteId />
                    Are you sure you want to delete item <span id="toDoTitleField"></span>?
                </div>

                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" class="btn" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" onclick=@(() => DeleteItem(DeleteId))>Delete</button>
                </div>

            </div>
        </div>
    </div>

}

@functions {
    ToDoItem[] items;
    ToDoItem currentItem = new ToDoItem();
    int DeleteId { get; set; } = 0;

    protected override async Task OnInitAsync()
    {
        items = await Http.GetJsonAsync<ToDoItem[]>("api/todo/items");
    }

    async void CreateItem()
    {
        var isValid = currentItem.IsValid();
        if (isValid != string.Empty)
        {
            await JSRuntime.Current.InvokeAsync<bool>("alert", string.Format("The field {0} is required!", isValid));
        }

        HandleError(await Http.PostAsync("api/todo/items", new StringContent(JsonConvert.SerializeObject(currentItem), Encoding.UTF8, "application/json")));

        RefreshView();
    }

    async void DeleteItem(int id)
    {
        HandleError(await Http.DeleteAsync($"api/todo/items/{id}"));

        await JSRuntime.Current.InvokeAsync<bool>("toDoInterop.hideDeleteDialog");

        RefreshView();
    }

    void HandleError(HttpResponseMessage response)
    {
        try
        {
            response.EnsureSuccessStatusCode();
        }
        catch (HttpRequestException hre)
        {
            Console.Write(hre.StackTrace);
        }
    }

    async void RefreshView()
    {
        items = await Http.GetJsonAsync<ToDoItem[]>("api/todo/items");
        currentItem = new ToDoItem();

        this.StateHasChanged();
    }

    async void ConfirmDelete(int id, string title)
    {
        DeleteId = id;

        await JSRuntime.Current.InvokeAsync<bool>("toDoInterop.confirmDelete", title);
    }
}